/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2021-01-20 01:12:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Models;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mail.SendMail;
import models.usuario;
import models.requisicao;

public final class deleteRequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("models.requisicao");
    _jspx_imports_classes.add("mail.SendMail");
    _jspx_imports_classes.add("models.usuario");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");

	String saida = "{ \"success\": true, \"message\": ";
	int idReq = Integer.parseInt(request.getParameter("idReq"));
	String acao = request.getParameter("acao");
	
	requisicao req = new requisicao();
	req.setID(idReq);
	req.searchRequestByID();
	
	usuario user = new usuario(req.getID_USUARIO());
	user.searchUser();
	String mensagem = "";
	String titulo = "";
	
	
	if(acao.equals("aceitar")){
		user.setID_NIVEL(user.getID_NIVEL() + 1);
		user.save();
		titulo = "Requisição aceita!";
		mensagem = "Parabéns! Sua requisição de aumento de nível foi aceita. Agora sua conta é de nível: " + req.getNIVEL_ALMEJADO();
		saida += "\"Requisição aceita com sucesso!\" }";
	}else{
		
		if(acao.equals("recusar")){
			titulo = "Requisição negada!";
			mensagem = "Olá! Este e-mail é para avisar que sua requisição de aumento de nível não foi aceita, sua conta permanecerá no nível: " + req.getNIVEL_ATUAL() + ". Mais sorte na próxima.";
			saida += "\"Requisição recusada com sucesso!\" }";
		}
	}
	
	String smtpHost 	= "smtp.gmail.com"; 
	String smtpPort 	= "587"; 
	String username 	= "gcmania2606@gmail.com";
	String password 	= "Lucas.Vinicius2606";
	String auth     	= "tls";  
	SendMail sendMail 	=  new SendMail( smtpHost,  smtpPort,  username,  password,  auth  );
	
	String mailFrom 	= "gcmania2606@gmail.com"; 
 	String mailTo 		= user.getEMAIL(); 
 	String mailSubject 	= titulo; 
 	String mailBody 	= mensagem; 
	sendMail.send( mailFrom, mailTo, mailSubject, mailBody );
	
	req.delete();
	
	out.write(saida);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
